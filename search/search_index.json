{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CarRent Einf\u00fchrung und Ziele Aufgabenstellung Es soll ein neues Autovermietungssystem \u201eCarRent\u201c erstellt werden. Das System soll aus einem Server-Teil und optional einen Web-Client bestehen. Folgende Detailinformationen liegen unstrukturiert \u00fcber das zu entwickelnde System vor: - Der Sachbearbeiter kann Kunden mit Namen und Adresse und Kundennummer im System verwalten, d.h. erfassen, bearbeiten, l\u00f6schen und den Kunden mit dessen Namen oder Kundennummer suchen. - Der Sachbearbeiter kann zudem die Autos von CarRent verwalten und nach denen suchen. - Jedes Auto kann einer bestimmten Klasse zwischen Luxusklasse, Mittelklasse oder Einfachklasse zugeordnet werden und besitzt zudem eine Marke, einen Typ und eine eindeutige Identifikation. - Jede Klasse besitzt eine Tagesgeb\u00fchr. - Bei einer neuen Reservation kann der Kunde ein Auto aus einer bestimmten Klasse w\u00e4hlen. Er muss zudem die Anzahl der Tage angeben, die er das Auto gerne mieten m\u00f6chte. Dabei werden die Gesamtkosten berechnet. Wird die Reservation gespeichert, so wird sie mit einer Reservationsnummer ablegt. - Bei Abholung des Autos wird die Reservation in einen Mietvertrag umgewandelt. Use Cases UC 01: CRUD & Search Customers Der Sachbearbeiter verwaltet Kunden im System (CRUD). UC 02: Search Customers Der Sachbearbeiter sucht und findet Kunden im System mittels Kundennummer oder dessen Namen. UC 03: CRUD Cars Der Sachbearbeiter verwaltet Fahrzeuge im System (CRUD). Der Sachbearbeiter kann Fahrzeuge einer bestimmten Klasse (Luxusklasse, Mittelklasse, Einfachklasse), Marke, Typ und eindeutiger ID zuweisen. UC 04: Search Cars Der Sachbearbeiter sucht und findet Fahrzeuge im System mittels derer ID. UC 05: Daily Fee Der Sachbearbeiter kann der Fahrzeugklasse eine Tagesgeb\u00fchr zuweisen. UC 06: Reservation Der Kunde kann eine Reservation auf eine bestimmte Fahrzeugklasse mit einer bestimmten Anzahl Tage erstellen. Die Gesamtkosten werden vom System automatisch berechnet. Beim Speichern der Reservation wird durch das System eine Reservationsnummer vergeben. UC 07: Contract creation Das System erstellt einen Mietvertrag basierend auf der Reservation, sobald der Kunde das Fahrzeug abholt. Qualit\u00e4tsziele Priorit\u00e4t Qualit\u00e4tsziel Szenario 1 Perfomante User Experience Interaktion mit Webseite 2 Data Consistency Ausfall von Server darf nicht zu Datenverlust f\u00fchren 3 System availability Auch bei Ausfall eines Servers soll System innerhalb von 2 Minuten wieder verf\u00fcgbar sein Stakeholder Rolle Kontakt Erwartungshaltung Lehrperson Cedric Menzi Dokumentation nach arc42 Randbedingungen Die Daten sollen mittels Repository Pattern in eine Datenbank gespeichert werden k\u00f6nnen. Die Business Logik soll auf dem Backend laufen und eine REST APIs anbieten. Es soll zuerst ein Monolith erstellt werden und sp\u00e4ter auf eine Micro Service Architektur \u00fcberf\u00fchrt werden Kontextabgrenzung Login und Authentifizierung von Kunden und Sachbearbeitern wird in diesem Projekt ausgeblendet Die Implementierung des Persistence Layers wird in einem sp\u00e4teren Zeitpunkt durchgef\u00fchrt Technischer Kontext L\u00f6sungsstrategie Implementierung des Repository Patterns Trennung des Persistence und Business Layers \u00fcber Interfaces Trennung des API und Business Layers Zugriff \u00fcber REST APIs Design als Monolith, aber schon vorbereitet, um in eine Micro Service Architektur \u00fcberf\u00fchrt zu werden Domain Driven Design Bausteinsicht Context Containers Components Classes Domain Model Whitebox Gesamtsystem Class Diagram Component Diagram - Interfaces Verteilungssicht Deployement View Querschnittliche Konzepte Entwurfsentscheidungen Qualit\u00e4tsanforderungen","title":"CarRent"},{"location":"#carrent","text":"","title":"CarRent"},{"location":"#einfuhrung-und-ziele","text":"","title":"Einf\u00fchrung und Ziele"},{"location":"#aufgabenstellung","text":"Es soll ein neues Autovermietungssystem \u201eCarRent\u201c erstellt werden. Das System soll aus einem Server-Teil und optional einen Web-Client bestehen. Folgende Detailinformationen liegen unstrukturiert \u00fcber das zu entwickelnde System vor: - Der Sachbearbeiter kann Kunden mit Namen und Adresse und Kundennummer im System verwalten, d.h. erfassen, bearbeiten, l\u00f6schen und den Kunden mit dessen Namen oder Kundennummer suchen. - Der Sachbearbeiter kann zudem die Autos von CarRent verwalten und nach denen suchen. - Jedes Auto kann einer bestimmten Klasse zwischen Luxusklasse, Mittelklasse oder Einfachklasse zugeordnet werden und besitzt zudem eine Marke, einen Typ und eine eindeutige Identifikation. - Jede Klasse besitzt eine Tagesgeb\u00fchr. - Bei einer neuen Reservation kann der Kunde ein Auto aus einer bestimmten Klasse w\u00e4hlen. Er muss zudem die Anzahl der Tage angeben, die er das Auto gerne mieten m\u00f6chte. Dabei werden die Gesamtkosten berechnet. Wird die Reservation gespeichert, so wird sie mit einer Reservationsnummer ablegt. - Bei Abholung des Autos wird die Reservation in einen Mietvertrag umgewandelt.","title":"Aufgabenstellung"},{"location":"#use-cases","text":"","title":"Use Cases"},{"location":"#uc-01-crud-search-customers","text":"Der Sachbearbeiter verwaltet Kunden im System (CRUD).","title":"UC 01: CRUD &amp; Search Customers"},{"location":"#uc-02-search-customers","text":"Der Sachbearbeiter sucht und findet Kunden im System mittels Kundennummer oder dessen Namen.","title":"UC 02: Search Customers"},{"location":"#uc-03-crud-cars","text":"Der Sachbearbeiter verwaltet Fahrzeuge im System (CRUD). Der Sachbearbeiter kann Fahrzeuge einer bestimmten Klasse (Luxusklasse, Mittelklasse, Einfachklasse), Marke, Typ und eindeutiger ID zuweisen.","title":"UC 03: CRUD Cars"},{"location":"#uc-04-search-cars","text":"Der Sachbearbeiter sucht und findet Fahrzeuge im System mittels derer ID.","title":"UC 04: Search Cars"},{"location":"#uc-05-daily-fee","text":"Der Sachbearbeiter kann der Fahrzeugklasse eine Tagesgeb\u00fchr zuweisen.","title":"UC 05: Daily Fee"},{"location":"#uc-06-reservation","text":"Der Kunde kann eine Reservation auf eine bestimmte Fahrzeugklasse mit einer bestimmten Anzahl Tage erstellen. Die Gesamtkosten werden vom System automatisch berechnet. Beim Speichern der Reservation wird durch das System eine Reservationsnummer vergeben.","title":"UC 06: Reservation"},{"location":"#uc-07-contract-creation","text":"Das System erstellt einen Mietvertrag basierend auf der Reservation, sobald der Kunde das Fahrzeug abholt.","title":"UC 07: Contract creation"},{"location":"#qualitatsziele","text":"Priorit\u00e4t Qualit\u00e4tsziel Szenario 1 Perfomante User Experience Interaktion mit Webseite 2 Data Consistency Ausfall von Server darf nicht zu Datenverlust f\u00fchren 3 System availability Auch bei Ausfall eines Servers soll System innerhalb von 2 Minuten wieder verf\u00fcgbar sein","title":"Qualit\u00e4tsziele"},{"location":"#stakeholder","text":"Rolle Kontakt Erwartungshaltung Lehrperson Cedric Menzi Dokumentation nach arc42","title":"Stakeholder"},{"location":"#randbedingungen","text":"Die Daten sollen mittels Repository Pattern in eine Datenbank gespeichert werden k\u00f6nnen. Die Business Logik soll auf dem Backend laufen und eine REST APIs anbieten. Es soll zuerst ein Monolith erstellt werden und sp\u00e4ter auf eine Micro Service Architektur \u00fcberf\u00fchrt werden","title":"Randbedingungen"},{"location":"#kontextabgrenzung","text":"Login und Authentifizierung von Kunden und Sachbearbeitern wird in diesem Projekt ausgeblendet Die Implementierung des Persistence Layers wird in einem sp\u00e4teren Zeitpunkt durchgef\u00fchrt","title":"Kontextabgrenzung"},{"location":"#technischer-kontext","text":"","title":"Technischer Kontext"},{"location":"#losungsstrategie","text":"Implementierung des Repository Patterns Trennung des Persistence und Business Layers \u00fcber Interfaces Trennung des API und Business Layers Zugriff \u00fcber REST APIs Design als Monolith, aber schon vorbereitet, um in eine Micro Service Architektur \u00fcberf\u00fchrt zu werden Domain Driven Design","title":"L\u00f6sungsstrategie"},{"location":"#bausteinsicht","text":"","title":"Bausteinsicht"},{"location":"#context","text":"","title":"Context"},{"location":"#containers","text":"","title":"Containers"},{"location":"#components","text":"","title":"Components"},{"location":"#classes","text":"","title":"Classes"},{"location":"#domain-model","text":"","title":"Domain Model"},{"location":"#whitebox-gesamtsystem","text":"","title":"Whitebox Gesamtsystem"},{"location":"#class-diagram","text":"","title":"Class Diagram"},{"location":"#component-diagram-interfaces","text":"","title":"Component Diagram - Interfaces"},{"location":"#verteilungssicht","text":"","title":"Verteilungssicht"},{"location":"#deployement-view","text":"","title":"Deployement View"},{"location":"#querschnittliche-konzepte","text":"","title":"Querschnittliche Konzepte"},{"location":"#entwurfsentscheidungen","text":"","title":"Entwurfsentscheidungen"},{"location":"#qualitatsanforderungen","text":"","title":"Qualit\u00e4tsanforderungen"}]}